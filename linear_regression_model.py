# -*- coding: utf-8 -*-
"""Linear Regression Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14z3eP9olQMjcfcIu2QtHeftnfzcyWDcv

# Linear Regression Machine Learning Project for House Price Prediction

### Import Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""### Importing Data and Checking out."""

House_DF = pd.read_csv("C:/Users/jaswa/Desktop/codetech-task1/House Data set.csv")

print(House_DF.head())
print(House_DF.info())
print(House_DF.describe())
print(House_DF.columns)

"""## Exploratory Data Analysis for House Price Prediction"""

sns.pairplot(House_DF)
plt.show()

sns.histplot(House_DF['Price'], kde=True)
plt.show()

# Select only numerical columns before calculating correlation
numerical_features = House_DF.select_dtypes(include=np.number)
sns.heatmap(numerical_features.corr(), annot=True, cmap='coolwarm')
plt.show()

"""### Prepare Data for Training"""

X = House_DF[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
               'Avg. Area Number of Bedrooms', 'Area Population']]

y = House_DF['Price']

"""### Split Data into Train, Test"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=101)

"""## Creating and Training the LinearRegression Model"""

from sklearn.linear_model import LinearRegression

lm = LinearRegression()

lm.fit(X_train, y_train)

"""## LinearRegression Model Evaluation"""

print("Intercept:", lm.intercept_)

coeff_df = pd.DataFrame(lm.coef_, X.columns, columns=['Coefficient'])
print(coeff_df)

"""## Predictions from our Linear Regression Model"""

predictions = lm.predict(X_test)

plt.scatter(y_test, predictions)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Prices')
plt.show()

"""In the above scatter plot, we see data is in line shape, which means our model has done good predictions."""

sns.histplot((y_test - predictions), bins=50, kde=True)
plt.title('Residuals Histogram')
plt.xlabel('Residuals')
plt.ylabel('Frequency')
plt.show()

"""In the above histogram plot, we see data is in bell shape (Normally Distributed), which means our model has done good predictions.

## Regression Evaluation Metrics
"""

from sklearn import metrics

print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))
